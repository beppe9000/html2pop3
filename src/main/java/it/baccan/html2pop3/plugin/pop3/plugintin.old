/*
 * Plugin per www.tin.it derivato da email.java
 *
 * Copyright 2004 Matteo Baccan  <matteo@baccan.it>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA (or visit
 * their web site at http://www.gnu.org/).
 *
 */
/**
 * Title: Tin HTML2POP3 Description: Convertitore da HTML a POP3 per www.tin.it
 * Copyright: Copyright (c) 2003 Company:
 *
 * @author Giulio Pollini, Matteo Baccan
 * @version 2.0
 */
package it.baccan.html2pop3.plugin.pop3;

import com.mashape.unirest.http.HttpResponse;
import com.mashape.unirest.http.Unirest;
import it.baccan.html2pop3.utils.message.pop3message;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.util.*;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.logging.Level;
import java.util.logging.Logger;

import lombok.Getter;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import org.json.JSONArray;
import org.json.JSONObject;
import org.unbescape.html.HtmlEscape;

/**
 *
 * @author matteo
 */
@Slf4j
public class plugintin extends pop3base implements pop3plugin {

    // Server di riferimento
    @Getter @Setter private String server = "";
    
    @Getter @Setter private String folder = "INBOX";

    // Property per variabili hidden
    private Properties prop = new Properties();
    
    private boolean bDebug = false;

    /**
     *
     */
    public plugintin() {
    }

    /**
     *
     * @param cUserParam
     * @param cPwd
     * @return
     */
    @Override
    public boolean login(String cUserParam, String cPwd) {
        bDebug = getDebug();
        
        boolean bRet = false;
        boolean bErr = false;
        
        String cFolder = "";
        int nQuestionMark = cUserParam.indexOf("?");
        if (nQuestionMark != -1) {
            try {
                cFolder = URLEncoder.encode(getPar(cUserParam.substring(nQuestionMark), "folder", "INBOX"), "UTF-8");
            } catch (UnsupportedEncodingException ex) {
                log.error("UnsupportedEncodingException", ex);
            }
            cUserParam = cUserParam.substring(0, nQuestionMark);
        } else {
            cFolder = "INBOX";
        }
        setFolder(cFolder);
        
        String cUser = cUserParam;

        // Pulizia informazioni di login
        String cDomain = cUser.substring(cUser.indexOf("@") + 1).toLowerCase();
        cUser = cUser.substring(0, cUser.indexOf("@")).toLowerCase();
        
        setProperty("userid", cUser);
        setProperty("password", cPwd);
        setProperty("domain", cDomain);
        
        for (int nRetry = 0; nRetry < 3; nRetry++) {
            bErr = false;

            // Login
            try {
                log.error("tin: login init (" + cDomain + "|" + nRetry + ")");
                
                HttpResponse<String> stringResponse = Unirest.post("https://aaacsc.alice.it/piattaformaAAA/aapm/amI")
                        .field("usernameDisplay", cUser)
                        .field("dominio", "@" + cDomain)
                        .field("password", cPwd)
                        .field("imageField", "")
                        .field("twoweeks", "false")
                        .field("login", cUser + "@" + cDomain)
                        .field("pwd", cPwd)
                        .field("channel", "mail_alice")
                        .field("URL_OK", "https://authsrs.alice.it/aap/aap_redir.jsp?entry=mail_alice")
                        .field("URL_KO", "https://mail.alice.it/boxlogin/errore.html")
                        .field("servizio", "mail")
                        .field("msisdn", cUser)
                        .field("username", cUser + "@" + cDomain)
                        .field("user", cUser + "@" + cDomain)
                        .field("a3afep", "https://mail.tim.it/boxlogin/errore.html")
                        .field("DOMAIN", cDomain)
                        .field("PASS", cPwd)
                        .field("self", "true")
                        .field("a3si", "none")
                        .field("a3st", "VCOMM")
                        .field("totop", "true")
                        .field("nototopa3ep", "true")
                        .field("a3aid", "lames")
                        .field("a3flag", "0")
                        .field("a3ep", "https://webmail.pc.tim.it/cp/ps/Main/login/SSOLogin")
                        .field("a3se", "https://mail.tim.it/boxlogin/errore.html")
                        .field("a3dcep", "http://communicator.alice.it/asp/homepage.asp?s=005")
                        .field("a3l", cUser + "@" + cDomain)
                        .field("a3p", cPwd)
                        .asString();

                // Mi faccio riconoscere dal sistema
                // Preparo I parametri
                String cPostNew = "usernameDisplay=" + cUser + "&"
                        + "dominio=%40" + cDomain + "&"
                        + "password=" + cPwd + "&"
                        + "imageField=&"
                        + "twoweeks=false&"
                        + "login=" + cUser + "%40" + cDomain + "&"
                        + "pwd=" + cPwd + "&"
                        + "channel=mail_alice&"
                        + "URL_OK=" + URLEncoder.encode("https://authsrs.alice.it/aap/aap_redir.jsp?entry=mail_alice", "UTF-8") + "&"
                        + "URL_KO=" + URLEncoder.encode("https://mail.alice.it/boxlogin/errore.html", "UTF-8") + "&"
                        + "servizio=mail&"
                        + "msisdn=" + cUser + "&"
                        + "username=" + cUser + "%40" + cDomain + "&"
                        + "user=" + cUser + "%40" + cDomain + "&"
                        + "a3afep=" + URLEncoder.encode("https://mail.tim.it/boxlogin/errore.html", "UTF-8") + "&"
                        + "DOMAIN=" + cDomain + "&"
                        + "PASS=" + cPwd + "&"
                        + "self=true&"
                        + "a3si=none&"
                        + "a3st=VCOMM&"
                        + "totop=true&"
                        + "nototopa3ep=true&"
                        + "a3aid=lames&"
                        + "a3flag=0&"
                        + "a3ep=" + URLEncoder.encode("https://webmail.pc.tim.it/cp/ps/Main/login/SSOLogin", "UTF-8") + "&"
                        + "a3se=" + URLEncoder.encode("https://mail.tim.it/boxlogin/errore.html", "UTF-8") + "&"
                        + "a3dcep=" + URLEncoder.encode("http://communicator.alice.it/asp/homepage.asp?s=005", "UTF-8") + "&"
                        + "a3l=" + cUser + "%40" + cDomain + "&"
                        + "a3p=" + cPwd + "&";
                //+ "channel=Vmail&"
                //+ "a3epvf=http%3A%2F%2Fwebmailvtin.alice.it%2Fcp%2Fps%2FMain%2Flogin%2FSSOLogin&"
                //+ "a3se=http%3A%2F%2Fportale.rossoalice.alice.it%2Fps%2FManageCodError.do%3Fcode%3D470%26channel%3DVmail&"
                //+ "a3dcep=http%3A%2F%2Fcommunicator.alice.it%2Fasp%2Fhomepage.asp%3Fs%3D005&";

                // Post
                String sb = stringResponse.getBody();
                
                String cUrl2Go = "https://aaacsc.alice.it/piattaformaAAA/aapm/amI";

                // Vado al sito
                //log.error("tin: POST:" + cUrl2Go);
                //String sb = postPage(cUrl2Go, "", cPostNew).toString();
                AtomicBoolean foundSession = new AtomicBoolean(false);
                stringResponse.getHeaders().get("Set-Cookie").forEach(cookie -> {
                    if (cookie.contains("PAAA_AUTHE")) {
                        if (cookie.length() > 15) {
                            foundSession.set(true);
                        }
                    }
                });
                // Ora prendo il cookie
                String cCook = getCookie();
                if (!foundSession.get() /*|| cCook.indexOf("PAAA_AUTHE=_;") != -1*/) {
                    setLastErr("Errore di autenticazione");
                    log.error("tin: PAAA_AUTHE empty");
                    log.error("tin: " + cCook);
                    log.error("tin: " + sb);
                    log.error("tin: login end");
                    return false;
                }

                // Loop di rimbalzo
                while (true) {
                    int href1 = sb.indexOf(" href=\"");
                    int href2 = sb.indexOf("\"", href1 + 7);
                    if (href1 == -1 || href2 == -1) {
                        break;
                    }
                    String anchor = sb.substring(href1 + 7, href2);
                    final String escaped = HtmlEscape.unescapeHtml(anchor);
                    log.error("tin: forward:" + escaped);
                    HttpResponse<String> response = Unirest.get( escaped ).asString();
                    sb = response.getBody();
                    //sb = getPage(escaped, cCook).toString();
                    cCook += getCookie();
                }
                
                int href1 = sb.indexOf(" src=\"");
                int href2 = sb.indexOf("\"", href1 + 6);
                String anchor = sb.substring(href1 + 6, href2);
                setServer(anchor.substring(0, anchor.indexOf("/", 10)));
                log.info("tin: LocalSSOLogin:" + anchor);
                log.info("tin: server:" + getServer());
                HttpResponse<String> response = Unirest.get( anchor ).asString();
                sb = response.getBody();
                    
                //sb = getPage(anchor, cCook).toString();
                cCook = getCookie();
                cCook += " ;compress=no";
                
                href1 = sb.indexOf(" src='");
                href2 = sb.indexOf("'", href1 + 6);
                anchor = sb.substring(href1 + 6, href2);
                log.error("tin: PreLogin: [{}{}]", getServer(), anchor);
                //sb = getPage(getServer() + anchor, cCook).toString();
                response = Unirest.get( getServer() + anchor ).asString();
                sb = response.getBody();
                
                href1 = sb.indexOf("&t=");
                href2 = sb.indexOf("&", href1 + 3);
                String t = sb.substring(href1 + 3, href2);
                setProperty("t", t);

                /*
                //setServer("http://webmailvtin.alice.it");
                //setServer("https://webmailtin.pc.tim.it");
                //cUrl2Go = getServer() + "/cp/ps/Main/login/SSOLogin";
                cUrl2Go = "https://webmail.pc.tim.it/cp/ps/Main/login/SSOLogin";
                String cPreLogin = "https://webmail.pc.tim.it/cp/ps/Main/login/PreLogin?u=" + cUser + "&d=" + cDomain + "&style=light&l=it";

                log.info("tin: SSO GET: [{}]", cUrl2Go);
                log.debug("tin: SSO GET cookies: [{}]", cCook);
                sb = getPage(cUrl2Go, cCook).toString();

                cCook += getCookie();
                log.debug("tin: All cookies: [{}]", cCook);

                cUrl2Go = cPreLogin;
                log.error("tin: LOGIN GET:" + cUrl2Go);
                sb = getPage(cUrl2Go, cCook).toString();

                sb = getPage("https://webmail22c.pc.tim.it/cp/ps/Main/login/LocalSSOLogin", cCook).toString();

                cCook += getCookie();
                if (bDebug) {
                    log.error("tin: login6C:" + cCook);
                }
                if (bDebug) {
                    log.error("tin: page:" + sb);
                }

                nUrl1 = sb.indexOf("name=\"t\" value=\"");
                nUrl2 = sb.indexOf("\"", nUrl1 + 16);
                setProperty("t", sb.substring(nUrl1 + 16, nUrl2));
                setProperty("cookie", cCook);
                 */
                cUrl2Go = getServer() + "/cp/ps/mail/SLcommands/SLEmailList?d=" + cDomain + "&u=" + cUser + "&t=" + getProperty("t") + "&l=it";
                
                log.error("tin: MailFrame GET:" + cUrl2Go);
                if (bDebug) {
                    log.error("tin: GET:" + cCook);
                }
                
                int nStart = 0;
                int nPage = 50;
                while (true) {
                    response = Unirest.post( cUrl2Go )
                            .field("fp",getFolder())
                            .field("limit",nPage)
                            .field("start",nStart)
                            .asString();
                    sb = response.getBody();
                    //sb = postPage(cUrl2Go, cCook, "fp=" + getFolder() + "&limit=" + nPage + "&start=" + nStart).toString().trim();
                        log.debug("tin: email: [{}]" , sb);
                    JSONObject json = new JSONObject(sb);
                    JSONArray el = (JSONArray) json.get("emails");
                    int nEmail = 0;
                    for (int n = 0; n < el.length(); n++) {
                        JSONObject email = (JSONObject) el.get(n);
                        //String uid = (String)email.get("uid");
                        Integer size = (Integer) email.get("size");
                        if (addEmailInfo(email.toString(), size.intValue())) {
                            nEmail++;
                        }
                    }
                    if (nEmail == 0) {
                        break;
                    }
                    nStart += nPage;
                }
                bRet = true;
                
            } catch (Throwable ex) {
                bErr = true;
                log.error("Error", ex);
            }

            // Se non ho errori esco, altrimenti faccio 3 tentativi
            if (!bErr) {
                break;
            } else {
                // Pausa in caso di errore di login e sendo tentativo
                try {
                    if (nRetry < 2) {
                        Thread.sleep(3000);
                    }
                } catch (Throwable ex) {
                    log.error("Pause error", ex);
                }
            }
        }
        
        log.error("tin: login end");
        
        return bRet;
    }

    /**
     *
     * @param p
     * @param o
     */
    protected void setProperty(String p, Object o) {
        prop.put(p, o);
    }

    /**
     *
     * @param p
     * @return
     */
    protected String getProperty(String p) {
        return prop.getProperty(p);
    }
    
    private String cleanJSON(String cJSON) {
        String cRet = cJSON;
        
        cRet = replace(cRet, "&quot;", "\"");
        cRet = replace(cRet, "&lt;", "<");
        cRet = replace(cRet, "&gt;", ">");
        cRet = replace(cRet, "&nbsp;", " ");
        cRet = replace(cRet, "&#39;", "'");
        
        return cRet.trim();
    }

    /**
     *
     * @param nPos
     * @return
     */
    public String getMessageID(int nPos) {
        String cEmailJSON = super.getMessageID(nPos);
        JSONObject jEmail = new JSONObject(cEmailJSON);
        return jEmail.getString("uid");
    }

    /**
     *
     * @param nPos
     * @return
     */
    public String getMessageIDFull(int nPos) {
        return super.getMessageID(nPos);
    }

    /**
     *
     * @param nPos
     * @param nLine
     * @param bAll
     * @return
     */
    public String getMessage(int nPos, int nLine, boolean bAll) {
        StringBuffer oMail = null;
        try {
            log.error("tin: getmail init");
            
            String cEmailJSON = getMessageIDFull(nPos);
            
            JSONObject jEmail = new JSONObject(cEmailJSON);
            
            String cMsgId = jEmail.getString("uid");
            
            if (bDebug) {
                log.error("tin: email:" + jEmail);
            }
            log.error("tin: getmail ID (" + cMsgId + ")");
            
            String sb = "";
            boolean bTop = !(bAll || nLine > 0);
            
            if (!bTop) {
                sb = postPage(getServer() + "/cp/ps/mail/SLcommands/SLEmailBody?l=it",
                        getProperty("cookie"),
                        "bid=&d=" + getProperty("domain") + "&folderpath=" + getFolder() + "&t=" + getProperty("t") + "&u=" + getProperty("userid") + "&uid=" + cMsgId).toString();
                if (bDebug) {
                    log.info(sb);
                }
            }
            
            if (bTop || (!bTop && getMessage(sb).length() > 0)) {
                pop3message pop3 = new pop3message();
                pop3.setDA("\"" + cleanJSON(jEmail.getString("fromnameoraddress")) + "\" <" + cleanJSON(jEmail.getString("from")) + ">");
                pop3.setData(formatDate(jEmail.getString("date")));
                pop3.setA(cleanJSON(jEmail.getString("to")));
                pop3.setOggetto(cleanJSON(jEmail.getString("subject")));
                if (!bTop) {
                    pop3.setBody(getMessage(sb));
                }

                // TOP optimization
                if (!bTop) {
                    //String cHasAttach = jEmail.getString( "hasattach" );
                    String sbHead = postPage(getServer() + "/cp/ps/mail/SLcommands/SLEmailHeaders?l=it&d=" + getProperty("domain") + "&t=" + getProperty("t") + "&u=" + getProperty("userid"),
                            getProperty("cookie"),
                            "folderpath=" + getFolder() + "&uid=" + cMsgId).toString();
                    JSONObject jHead = new JSONObject(sbHead);
                    JSONArray ja = (JSONArray) jHead.get("emailheaders");
                    if (ja != null) {
                        if (ja.length() > 0) {
                            JSONObject row = (JSONObject) ja.get(0);
                            pop3.setCC(cleanJSON(row.getString("cc")));
                        }
                    }
                    
                    if (bDebug) {
                        log.info(jHead.toString());
                    }
                    
                    if (ja != null) {
                        if (ja.length() > 0) {
                            JSONObject row = (JSONObject) ja.get(0);
                            //String yy = getServer() +row.getString( "urlZipDownloader" );
                            //byte[] xx = getPage( yy, getProperty("cookie") );
                            //xx=xx; String y = new String(xx);
                            JSONArray jatt = (JSONArray) row.get("attachments");
                            if (jatt != null) {
                                int n = 0;
                                while (n < jatt.length()) {
                                    JSONObject jAttach = (JSONObject) jatt.get(n);
                                    String urlDownloader = getServer() + jAttach.getString("urlDownloader") + "&disposition=attachment";
                                    byte[] cFile = postPageBytes(urlDownloader, getProperty("cookie"), "u=" + getProperty("userid") + "&d=" + getProperty("domain") + "&t=" + getProperty("t"), "", "", "");
                                    pop3.addAttach(cleanJSON(jAttach.getString("name")), cFile);
                                    n++;
                                }
                            }
                        }
                    }
                    
                }
                oMail = new StringBuffer();
                oMail.append(pop3.getMessage(nLine, bAll));
            } else {
                log.error("tin: errore di lettura email");
                log.error("tin: BODY:" + sb);
            }
            
            log.error("tin: getmail end");
        } catch (Throwable ex) {
            oMail = null;
            log.error("Error", ex);
        }
        return (oMail == null ? null : oMail.toString());
    }

    /**
     *
     * @param nPos
     * @return
     */
    public boolean delMessage(int nPos) {
        boolean bRet = false;
        try {
            log.error("tin: delmessage init");
            
            String cEmailJSON = getMessageIDFull(nPos);
            
            JSONObject jEmail = new JSONObject(cEmailJSON);
            
            String cMsgId = jEmail.getString("pid");
            
            if (bDebug) {
                log.error("tin: email:" + cEmailJSON);
            }
            log.error("tin: delmessage ID " + cMsgId);
            
            String sb = postPage(getServer() + "/cp/ps/mail/SLcommands/SLDeleteMessage?l=it",
                    getProperty("cookie"),
                    "d=" + getProperty("domain") + "&t=" + getProperty("t") + "&u=" + getProperty("userid") + "&selection=" + cMsgId).toString();
            
            JSONObject jDelete = new JSONObject(sb);
            bRet = jDelete.getBoolean("success");
            
            log.info("tin: delmessage end");
        } catch (Throwable ex) {
            log.error("Error", ex);
        }
        return bRet;
    }
    
    private static boolean bDelete = true;

    /**
     *
     * @param b
     */
    static public void setDelete(boolean b) {
        bDelete = b;
    }

    /**
     *
     * @return
     */
    static public boolean getDelete() {
        return bDelete;
    }

    /**
     *
     */
    public void delMessageEnd() {
        
        try {
            log.error("tin: delmessageEnd init");

            // 15:35:22 martedi' 26 giugno 2012
            // per ora non faccio la pulizia del cestino, tanto e' dopo 7 giorni
            //if( bDelete ) getPage( cServer +"/cp/ps/Mail/EmptyTrash?fp=Cestino&d=" +getProperty("domain") +"&an=" +getProperty("an") +"&u=" +getProperty("userid") +"&t=" +getProperty("t") +"&IAmInEmailList=true&style=&l=it&s=" +getProperty("s") );
            log.info("tin: delmessageEnd end");
        } catch (Throwable ex) {
            log.error("Error", ex);
        }
    }
    
    private String getMessage(String cMail) {
        String cRet = "";
        //01234567890123 456789012345678901234 567890123456789
        String cMessageIni = "<body ";//onload=\"calcHeight();\" onresize=\"calcHeight();return false;\">";
        int nInfo = cMail.indexOf(cMessageIni);
        if (nInfo != -1) {
            nInfo = cMail.indexOf(">", nInfo);
        }
        int nInfo2 = cMail.indexOf("<!-- DO NOT REMOVE THIS USED TO CALC LENGHT OF PAGE -->", nInfo);
        if (nInfo != -1 && nInfo2 > nInfo) {
            cRet = cMail.substring(nInfo + 1, nInfo2);
        }
        int nInfo3 = cMail.indexOf("<script language=\"JavaScript\">", nInfo);
        if (nInfo3 != -1 && nInfo3 > nInfo && nInfo3 < nInfo2) {
            cRet = cMail.substring(nInfo + 1, nInfo3);
        }
        
        return cRet.trim();
    }

    //TODO:
    //From: xxxxxxxxxx <xxxxxxx.xxxxxx@gmail.com>
    private String formatDate(String cDate) {
        String cRet = getCurDate();

        // 26-giu-2012 9.31
        int nYear = 0;
        int nMonth = 0;
        int nDay = 0;
        int nH = 0;
        int nM = 0;
        int nS = 0;
        
        int nTok = 0;
        StringTokenizer st = new StringTokenizer(cDate, " /:.-");
        while (st.hasMoreTokens()) {
            String cTok = st.nextToken();
            nTok++;
            if (nTok == 1) {
                nDay = Integer.parseInt(cTok);
            } else if (nTok == 2) {
                nMonth = month2numIta(cTok);
            } else if (nTok == 3) {
                nYear = Integer.parseInt(cTok) - 1900;
            } else if (nTok == 4) {
                nH = Integer.parseInt(cTok);
            } else if (nTok == 5) {
                nM = Integer.parseInt(cTok);
            }
        }
        if (nTok > 4) {
            cRet = formatDate(nYear, nMonth, nDay, nH, nM, nS);
        }
        
        return cRet;
    }

    /**
     *
     * @param args
     */
    public static void main(String[] args) {
        plugintin tin = new plugintin();
        if (tin.login(args[0], args[1])) {
            int nNum = tin.getMessageNum();
            int nSiz = tin.getMessageSize();
            log.info("getMessageNum  :" + nNum);
            log.info("getMessageSize :" + nSiz);
            for (int nPos = 1; nPos <= nNum; nPos++) {
                log.info("getMessageID   (" + nPos + "):" + tin.getMessageID(nPos));
                log.info("getMessageSize (" + nPos + "):" + tin.getMessageSize(nPos));
                log.info("getMessage     (" + nPos + "):" + tin.getMessage(nPos));
                break;
            }
        }
    }
    
}
